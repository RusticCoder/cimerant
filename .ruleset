<?xml version="1.0" encoding="UTF-8"?>
<ruleset xmlns="http://pmd.sourceforge.net/ruleset/2.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         name="pmd-eclipse"
         xsi:schemaLocation="http://pmd.sourceforge.net/ruleset/2.0.0 https://pmd.sourceforge.io/ruleset_2_0_0.xsd">
   <description>PMD Plugin preferences rule set</description>
   <rule ref="category/java/bestpractices.xml/AbstractClassWithoutAbstractMethod"/>
   <rule ref="category/java/bestpractices.xml/AccessorClassGeneration"/>
   <rule ref="category/java/bestpractices.xml/AccessorMethodGeneration"/>
   <rule ref="category/modelica/bestpractices.xml/AmbiguousResolution"/>
   <rule ref="category/apex/bestpractices.xml/ApexAssertionsShouldIncludeMessage"/>
   <rule ref="category/apex/bestpractices.xml/ApexUnitTestClassShouldHaveAsserts"/>
   <rule ref="category/apex/bestpractices.xml/ApexUnitTestClassShouldHaveRunAs"/>
   <rule ref="category/apex/bestpractices.xml/ApexUnitTestMethodShouldHaveIsTestAnnotation"/>
   <rule ref="category/apex/bestpractices.xml/ApexUnitTestShouldNotUseSeeAllDataTrue"/>
   <rule ref="category/java/bestpractices.xml/ArrayIsStoredDirectly"/>
   <rule ref="category/apex/bestpractices.xml/AvoidGlobalModifier"/>
   <rule ref="category/html/bestpractices.xml/AvoidInlineStyles"/>
   <rule ref="category/apex/bestpractices.xml/AvoidLogicInTrigger"/>
   <rule ref="category/java/bestpractices.xml/AvoidMessageDigestField"/>
   <rule ref="category/java/bestpractices.xml/AvoidPrintStackTrace"/>
   <rule ref="category/java/bestpractices.xml/AvoidReassigningCatchVariables"/>
   <rule ref="category/java/bestpractices.xml/AvoidReassigningLoopVariables"/>
   <rule ref="category/java/bestpractices.xml/AvoidReassigningParameters"/>
   <rule ref="category/vm/bestpractices.xml/AvoidReassigningParameters"/>
   <rule ref="category/java/bestpractices.xml/AvoidStringBufferField"/>
   <rule ref="category/java/bestpractices.xml/AvoidUsingHardCodedIP"/>
   <rule ref="category/ecmascript/bestpractices.xml/AvoidWithStatement"/>
   <rule ref="category/java/bestpractices.xml/CheckResultSet"/>
   <rule ref="category/modelica/bestpractices.xml/ClassStartNameEqualsEndName"/>
   <rule ref="category/modelica/bestpractices.xml/ConnectUsingNonConnector"/>
   <rule ref="category/ecmascript/bestpractices.xml/ConsistentReturn"/>
   <rule ref="category/java/bestpractices.xml/ConstantsInInterface">
      <properties>
         <property description="Whether to ignore constants in interfaces if the interface defines any methods"
                   name="ignoreIfHasMethods"
                   type="Boolean">
            <value>true</value>
         </property>
      </properties>
   </rule>
   <rule ref="category/apex/bestpractices.xml/DebugsShouldUseLoggingLevel">
      <properties>
         <property description="If true, mark statements that use the DEBUG enum of LoggingLevel."
                   name="strictMode"
                   type="Boolean">
            <value>false</value>
         </property>
      </properties>
   </rule>
   <rule ref="category/java/bestpractices.xml/DefaultLabelNotLastInSwitchStmt"/>
   <rule ref="category/jsp/bestpractices.xml/DontNestJsfInJstlIteration"/>
   <rule ref="category/java/bestpractices.xml/DoubleBraceInitialization"/>
   <rule ref="category/java/bestpractices.xml/ForLoopCanBeForeach"/>
   <rule ref="category/java/bestpractices.xml/ForLoopVariableCount">
      <properties>
         <property description="A regular for statement will have 1 control variable"
                   max="100"
                   min="0"
                   name="maximumVariables"
                   type="Integer">
            <value>1</value>
         </property>
      </properties>
   </rule>
   <rule ref="category/kotlin/bestpractices.xml/FunctionNameTooShort"/>
   <rule ref="category/ecmascript/bestpractices.xml/GlobalVariable"/>
   <rule ref="category/java/bestpractices.xml/GuardLogStatement"/>
   <rule ref="category/java/bestpractices.xml/JUnit4SuitesShouldUseSuiteAnnotation"/>
   <rule ref="category/java/bestpractices.xml/JUnit4TestShouldUseAfterAnnotation"/>
   <rule ref="category/java/bestpractices.xml/JUnit4TestShouldUseBeforeAnnotation"/>
   <rule ref="category/java/bestpractices.xml/JUnit4TestShouldUseTestAnnotation">
      <properties>
         <property description="The regex pattern used to identify test classes"
                   name="testClassPattern"
                   type="Regex">
            <value>Test</value>
         </property>
      </properties>
   </rule>
   <rule ref="category/java/bestpractices.xml/JUnit5TestShouldBePackagePrivate"/>
   <rule ref="category/java/bestpractices.xml/JUnitAssertionsShouldIncludeMessage"/>
   <rule ref="category/java/bestpractices.xml/JUnitTestContainsTooManyAsserts"/>
   <rule ref="category/java/bestpractices.xml/JUnitTestsShouldIncludeAssert"/>
   <rule ref="category/java/bestpractices.xml/JUnitUseExpected"/>
   <rule ref="category/java/bestpractices.xml/LiteralsFirstInComparisons"/>
   <rule ref="category/java/bestpractices.xml/LooseCoupling"/>
   <rule ref="category/java/bestpractices.xml/MethodReturnsInternalArray"/>
   <rule ref="category/java/bestpractices.xml/MissingOverride"/>
   <rule ref="category/jsp/bestpractices.xml/NoClassAttribute"/>
   <rule ref="category/jsp/bestpractices.xml/NoHtmlComments"/>
   <rule ref="category/jsp/bestpractices.xml/NoJspForward"/>
   <rule ref="category/java/bestpractices.xml/OneDeclarationPerLine">
      <properties>
         <property description="If true, mark combined declaration even if the declarations are on separate lines."
                   name="strictMode"
                   type="Boolean">
            <value>false</value>
         </property>
      </properties>
   </rule>
   <rule ref="category/java/bestpractices.xml/PreserveStackTrace"/>
   <rule ref="category/java/bestpractices.xml/PrimitiveWrapperInstantiation"/>
   <rule ref="category/swift/bestpractices.xml/ProhibitedInterfaceBuilder"/>
   <rule ref="category/java/bestpractices.xml/ReplaceEnumerationWithIterator"/>
   <rule ref="category/java/bestpractices.xml/ReplaceHashtableWithMap"/>
   <rule ref="category/java/bestpractices.xml/ReplaceVectorWithList"/>
   <rule ref="category/ecmascript/bestpractices.xml/ScopeForInVariable"/>
   <rule ref="category/java/bestpractices.xml/SimplifiableTestAssertion"/>
   <rule ref="category/java/bestpractices.xml/SwitchStmtsShouldHaveDefault"/>
   <rule ref="category/java/bestpractices.xml/SystemPrintln"/>
   <rule ref="category/plsql/bestpractices.xml/TomKytesDespair"/>
   <rule ref="category/swift/bestpractices.xml/UnavailableFunction"/>
   <rule ref="category/html/bestpractices.xml/UnnecessaryTypeAttribute"/>
   <rule ref="category/java/bestpractices.xml/UnusedAssignment"/>
   <rule ref="category/java/bestpractices.xml/UnusedFormalParameter"/>
   <rule ref="category/apex/bestpractices.xml/UnusedLocalVariable"/>
   <rule ref="category/java/bestpractices.xml/UnusedLocalVariable"/>
   <rule ref="category/vm/bestpractices.xml/UnusedMacroParameter"/>
   <rule ref="category/java/bestpractices.xml/UnusedPrivateField"/>
   <rule ref="category/java/bestpractices.xml/UnusedPrivateMethod"/>
   <rule ref="category/html/bestpractices.xml/UseAltAttributeForImages"/>
   <rule ref="category/ecmascript/bestpractices.xml/UseBaseWithParseInt"/>
   <rule ref="category/java/bestpractices.xml/UseCollectionIsEmpty"/>
   <rule ref="category/java/bestpractices.xml/UseStandardCharsets"/>
   <rule ref="category/java/bestpractices.xml/UseTryWithResources"/>
   <rule ref="category/java/bestpractices.xml/UseVarargs"/>
   <rule ref="category/java/bestpractices.xml/WhileLoopWithLiteralBoolean"/>
   <rule ref="category/ecmascript/codestyle.xml/AssignmentInOperand">
      <properties>
         <property description="Allow assignment within the conditional expression of an if statement"
                   name="allowIf"
                   type="Boolean">
            <value>false</value>
         </property>
         <property description="Allow assignment within the conditional expression of a for statement"
                   name="allowFor"
                   type="Boolean">
            <value>false</value>
         </property>
         <property description="Allow assignment within the conditional expression of a while statement"
                   name="allowWhile"
                   type="Boolean">
            <value>false</value>
         </property>
         <property description="Allow assignment within the conditional expression of a ternary operator"
                   name="allowTernary"
                   type="Boolean">
            <value>false</value>
         </property>
         <property description="Allow assignment within the result expressions of a ternary operator"
                   name="allowTernaryResults"
                   type="Boolean">
            <value>false</value>
         </property>
         <property description="Allow increment or decrement operators within the conditional expression of an if, for, or while statement"
                   name="allowIncrementDecrement"
                   type="Boolean">
            <value>false</value>
         </property>
      </properties>
   </rule>
   <rule ref="category/java/codestyle.xml/AtLeastOneConstructor"/>
   <rule ref="category/java/codestyle.xml/AvoidDollarSigns"/>
   <rule ref="category/java/codestyle.xml/AvoidProtectedFieldInFinalClass"/>
   <rule ref="category/java/codestyle.xml/AvoidProtectedMethodInFinalClassNotExtending"/>
   <rule ref="category/plsql/codestyle.xml/AvoidTabCharacter"/>
   <rule ref="category/java/codestyle.xml/AvoidUsingNativeCode"/>
   <rule ref="category/java/codestyle.xml/BooleanGetMethodName">
      <properties>
         <property description="Check parameterized methods"
                   name="checkParameterizedMethods"
                   type="Boolean">
            <value>false</value>
         </property>
      </properties>
   </rule>
   <rule ref="category/java/codestyle.xml/CallSuperInConstructor"/>
   <rule ref="category/apex/codestyle.xml/ClassNamingConventions"/>
   <rule ref="category/java/codestyle.xml/ClassNamingConventions"/>
   <rule ref="category/plsql/codestyle.xml/CodeFormat"/>
   <rule ref="category/java/codestyle.xml/CommentDefaultAccessModifier"/>
   <rule ref="category/java/codestyle.xml/ConfusingTernary"/>
   <rule ref="category/java/codestyle.xml/ControlStatementBraces">
      <properties>
         <property description="Require that 'if ... else' statements use braces"
                   name="checkIfElseStmt"
                   type="Boolean">
            <value>true</value>
         </property>
         <property description="Require that 'if' statements with a single branch use braces"
                   name="checkSingleIfStmt"
                   type="Boolean">
            <value>true</value>
         </property>
         <property description="Require that 'while' loops use braces"
                   name="checkWhileStmt"
                   type="Boolean">
            <value>true</value>
         </property>
         <property description="Require that 'for' loops should use braces"
                   name="checkForStmt"
                   type="Boolean">
            <value>true</value>
         </property>
         <property description="Require that 'do ... while' loops use braces"
                   name="checkDoWhileStmt"
                   type="Boolean">
            <value>true</value>
         </property>
         <property description="Require that cases of a switch have braces"
                   name="checkCaseStmt"
                   type="Boolean">
            <value>false</value>
         </property>
         <property description="Allow loops with an empty statement, e.g. 'while(true);'"
                   name="allowEmptyLoop"
                   type="Boolean">
            <value>false</value>
         </property>
      </properties>
   </rule>
   <rule ref="category/jsp/codestyle.xml/DuplicateJspImports"/>
   <rule ref="category/java/codestyle.xml/EmptyControlStatement"/>
   <rule ref="category/java/codestyle.xml/EmptyMethodInAbstractClassShouldBeAbstract"/>
   <rule ref="category/java/codestyle.xml/ExtendsObject"/>
   <rule ref="category/apex/codestyle.xml/FieldDeclarationsShouldBeAtStart"/>
   <rule ref="category/java/codestyle.xml/FieldDeclarationsShouldBeAtStartOfClass"/>
   <rule ref="category/apex/codestyle.xml/FieldNamingConventions"/>
   <rule ref="category/java/codestyle.xml/FieldNamingConventions"/>
   <rule ref="category/java/codestyle.xml/FinalParameterInAbstractMethod"/>
   <rule ref="category/plsql/codestyle.xml/ForLoopNaming">
      <properties>
         <property description="Ignore simple loops, that are not nested"
                   name="allowSimpleLoops"
                   type="Boolean">
            <value>false</value>
         </property>
         <property description="The pattern used for the cursor loop variable"
                   name="cursorPattern"
                   type="Regex">
            <value>[a-zA-Z_0-9]{5,}</value>
         </property>
         <property description="The pattern used for the index loop variable"
                   name="indexPattern"
                   type="Regex">
            <value>[a-zA-Z_0-9]{5,}</value>
         </property>
      </properties>
   </rule>
   <rule ref="category/java/codestyle.xml/ForLoopShouldBeWhileLoop"/>
   <rule ref="category/apex/codestyle.xml/ForLoopsMustUseBraces"/>
   <rule ref="category/ecmascript/codestyle.xml/ForLoopsMustUseBraces"/>
   <rule ref="category/apex/codestyle.xml/FormalParameterNamingConventions"/>
   <rule ref="category/java/codestyle.xml/FormalParameterNamingConventions"/>
   <rule ref="category/java/codestyle.xml/GenericsNaming"/>
   <rule ref="category/java/codestyle.xml/IdenticalCatchBranches"/>
   <rule ref="category/apex/codestyle.xml/IfElseStmtsMustUseBraces"/>
   <rule ref="category/ecmascript/codestyle.xml/IfElseStmtsMustUseBraces"/>
   <rule ref="category/apex/codestyle.xml/IfStmtsMustUseBraces"/>
   <rule ref="category/ecmascript/codestyle.xml/IfStmtsMustUseBraces"/>
   <rule ref="category/plsql/codestyle.xml/LineLength"/>
   <rule ref="category/java/codestyle.xml/LinguisticNaming"/>
   <rule ref="category/java/codestyle.xml/LocalHomeNamingConvention"/>
   <rule ref="category/java/codestyle.xml/LocalInterfaceSessionNamingConvention"/>
   <rule ref="category/java/codestyle.xml/LocalVariableCouldBeFinal"/>
   <rule ref="category/apex/codestyle.xml/LocalVariableNamingConventions"/>
   <rule ref="category/java/codestyle.xml/LocalVariableNamingConventions"/>
   <rule ref="category/java/codestyle.xml/LongVariable">
      <properties>
         <property description="The variable length reporting threshold"
                   max="100"
                   min="1"
                   name="minimum"
                   type="Integer">
            <value>17</value>
         </property>
      </properties>
   </rule>
   <rule ref="category/java/codestyle.xml/MDBAndSessionBeanNamingConvention"/>
   <rule ref="category/java/codestyle.xml/MethodArgumentCouldBeFinal"/>
   <rule ref="category/apex/codestyle.xml/MethodNamingConventions"/>
   <rule ref="category/java/codestyle.xml/MethodNamingConventions"/>
   <rule ref="category/plsql/codestyle.xml/MisplacedPragma"/>
   <rule ref="category/ecmascript/codestyle.xml/NoElseReturn"/>
   <rule ref="category/java/codestyle.xml/NoPackage"/>
   <rule ref="category/apex/codestyle.xml/OneDeclarationPerLine">
      <properties>
         <property description="If true, mark combined declaration even if the declarations are on separate lines."
                   name="strictMode"
                   type="Boolean">
            <value>false</value>
         </property>
         <property description="If false, multiple declarations in a for loop initializer are not flagged."
                   name="reportInForLoopInitializer"
                   type="Boolean">
            <value>true</value>
         </property>
      </properties>
   </rule>
   <rule ref="category/java/codestyle.xml/OnlyOneReturn"/>
   <rule ref="category/java/codestyle.xml/PackageCase"/>
   <rule ref="category/java/codestyle.xml/PrematureDeclaration"/>
   <rule ref="category/apex/codestyle.xml/PropertyNamingConventions"/>
   <rule ref="category/java/codestyle.xml/RemoteInterfaceNamingConvention"/>
   <rule ref="category/java/codestyle.xml/RemoteSessionInterfaceNamingConvention"/>
   <rule ref="category/java/codestyle.xml/ShortClassName">
      <properties>
         <property description="Number of characters that are required as a minimum for a class name."
                   max="100"
                   min="1"
                   name="minimum"
                   type="Integer">
            <value>5</value>
         </property>
      </properties>
   </rule>
   <rule ref="category/java/codestyle.xml/ShortMethodName">
      <properties>
         <property description="Number of characters that are required as a minimum for a method name."
                   max="100"
                   min="1"
                   name="minimum"
                   type="Integer">
            <value>3</value>
         </property>
      </properties>
   </rule>
   <rule ref="category/java/codestyle.xml/ShortVariable">
      <properties>
         <property description="Number of characters that are required as a minimum for a variable name."
                   max="100"
                   min="1"
                   name="minimum"
                   type="Integer">
            <value>3</value>
         </property>
      </properties>
   </rule>
   <rule ref="category/java/codestyle.xml/TooManyStaticImports">
      <properties>
         <property description="All static imports can be disallowed by setting this to 0"
                   max="100"
                   min="0"
                   name="maximumStaticImports"
                   type="Integer">
            <value>4</value>
         </property>
      </properties>
   </rule>
   <rule ref="category/java/codestyle.xml/UnnecessaryAnnotationValueElement">
      <properties>
         <property description="If disabled, the rule shows also violations that are applicable for java8+"
                   name="java7Compatibility"
                   type="Boolean">
            <value>false</value>
         </property>
      </properties>
   </rule>
   <rule ref="category/ecmascript/codestyle.xml/UnnecessaryBlock"/>
   <rule ref="category/java/codestyle.xml/UnnecessaryBoxing"/>
   <rule ref="category/java/codestyle.xml/UnnecessaryCast"/>
   <rule ref="category/java/codestyle.xml/UnnecessaryConstructor"/>
   <rule ref="category/java/codestyle.xml/UnnecessaryFullyQualifiedName"/>
   <rule ref="category/java/codestyle.xml/UnnecessaryImport"/>
   <rule ref="category/java/codestyle.xml/UnnecessaryLocalBeforeReturn"/>
   <rule ref="category/java/codestyle.xml/UnnecessaryModifier"/>
   <rule ref="category/ecmascript/codestyle.xml/UnnecessaryParentheses"/>
   <rule ref="category/java/codestyle.xml/UnnecessaryReturn"/>
   <rule ref="category/java/codestyle.xml/UnnecessarySemicolon"/>
   <rule ref="category/ecmascript/codestyle.xml/UnreachableCode"/>
   <rule ref="category/xsl/codestyle.xml/UseConcatOnce"/>
   <rule ref="category/java/codestyle.xml/UseDiamondOperator"/>
   <rule ref="category/java/codestyle.xml/UselessParentheses"/>
   <rule ref="category/java/codestyle.xml/UselessQualifiedThis"/>
   <rule ref="category/java/codestyle.xml/UseShortArrayInitializer"/>
   <rule ref="category/java/codestyle.xml/UseUnderscoresInNumericLiterals">
      <properties>
         <property description="Length under which literals in base 10 are not required to have underscores"
                   max="1000"
                   min="3"
                   name="acceptableDecimalLength"
                   type="Integer">
            <value>4</value>
         </property>
      </properties>
   </rule>
   <rule ref="category/apex/codestyle.xml/WhileLoopsMustUseBraces"/>
   <rule ref="category/ecmascript/codestyle.xml/WhileLoopsMustUseBraces"/>
   <rule ref="category/java/design.xml/AbstractClassWithoutAnyMethod"/>
   <rule ref="category/java/design.xml/AvoidCatchingGenericException"/>
   <rule ref="category/apex/design.xml/AvoidDeeplyNestedIfStmts"/>
   <rule ref="category/java/design.xml/AvoidDeeplyNestedIfStmts"/>
   <rule ref="category/vm/design.xml/AvoidDeeplyNestedIfStmts"/>
   <rule ref="category/java/design.xml/AvoidRethrowingException"/>
   <rule ref="category/java/design.xml/AvoidThrowingNewInstanceOfSameException"/>
   <rule ref="category/java/design.xml/AvoidThrowingNullPointerException"/>
   <rule ref="category/java/design.xml/AvoidThrowingRawExceptionTypes"/>
   <rule ref="category/java/design.xml/AvoidUncheckedExceptionsInSignatures"/>
   <rule ref="category/java/design.xml/ClassWithOnlyPrivateConstructorsShouldBeFinal"/>
   <rule ref="category/apex/design.xml/CognitiveComplexity"/>
   <rule ref="category/java/design.xml/CognitiveComplexity"/>
   <rule ref="category/java/design.xml/CollapsibleIfStatements"/>
   <rule ref="category/vm/design.xml/CollapsibleIfStatements"/>
   <rule ref="category/java/design.xml/CouplingBetweenObjects"/>
   <rule ref="category/apex/design.xml/CyclomaticComplexity"/>
   <rule ref="category/java/design.xml/CyclomaticComplexity"/>
   <rule ref="category/plsql/design.xml/CyclomaticComplexity"/>
   <rule ref="category/java/design.xml/DataClass"/>
   <rule ref="category/java/design.xml/DoNotExtendJavaLangError"/>
   <rule ref="category/java/design.xml/ExceptionAsFlowControl"/>
   <rule ref="category/apex/design.xml/ExcessiveClassLength"/>
   <rule ref="category/java/design.xml/ExcessiveClassLength"/>
   <rule ref="category/java/design.xml/ExcessiveImports"/>
   <rule ref="category/java/design.xml/ExcessiveMethodLength"/>
   <rule ref="category/plsql/design.xml/ExcessiveMethodLength"/>
   <rule ref="category/plsql/design.xml/ExcessiveObjectLength"/>
   <rule ref="category/plsql/design.xml/ExcessivePackageBodyLength"/>
   <rule ref="category/plsql/design.xml/ExcessivePackageSpecificationLength"/>
   <rule ref="category/apex/design.xml/ExcessiveParameterList"/>
   <rule ref="category/java/design.xml/ExcessiveParameterList"/>
   <rule ref="category/plsql/design.xml/ExcessiveParameterList"/>
   <rule ref="category/apex/design.xml/ExcessivePublicCount"/>
   <rule ref="category/java/design.xml/ExcessivePublicCount"/>
   <rule ref="category/vm/design.xml/ExcessiveTemplateLength"/>
   <rule ref="category/plsql/design.xml/ExcessiveTypeLength"/>
   <rule ref="category/java/design.xml/FinalFieldCouldBeStatic"/>
   <rule ref="category/java/design.xml/GodClass"/>
   <rule ref="category/java/design.xml/ImmutableField"/>
   <rule ref="category/java/design.xml/InvalidJavaBean"/>
   <rule ref="category/java/design.xml/LawOfDemeter"/>
   <rule ref="category/java/design.xml/LogicInversion"/>
   <rule ref="category/java/design.xml/LoosePackageCoupling"/>
   <rule ref="category/java/design.xml/MutableStaticState"/>
   <rule ref="category/apex/design.xml/NcssConstructorCount"/>
   <rule ref="category/java/design.xml/NcssCount"/>
   <rule ref="category/apex/design.xml/NcssMethodCount"/>
   <rule ref="category/plsql/design.xml/NcssMethodCount"/>
   <rule ref="category/plsql/design.xml/NcssObjectCount"/>
   <rule ref="category/apex/design.xml/NcssTypeCount"/>
   <rule ref="category/vm/design.xml/NoInlineJavaScript"/>
   <rule ref="category/jsp/design.xml/NoInlineScript"/>
   <rule ref="category/jsp/design.xml/NoInlineStyleInformation"/>
   <rule ref="category/vm/design.xml/NoInlineStyles"/>
   <rule ref="category/jsp/design.xml/NoLongScripts"/>
   <rule ref="category/jsp/design.xml/NoScriptlets"/>
   <rule ref="category/java/design.xml/NPathComplexity"/>
   <rule ref="category/plsql/design.xml/NPathComplexity"/>
   <rule ref="category/java/design.xml/SignatureDeclareThrowsException"/>
   <rule ref="category/java/design.xml/SimplifiedTernary"/>
   <rule ref="category/java/design.xml/SimplifyBooleanExpressions"/>
   <rule ref="category/java/design.xml/SimplifyBooleanReturns"/>
   <rule ref="category/java/design.xml/SimplifyConditional"/>
   <rule ref="category/java/design.xml/SingularField"/>
   <rule ref="category/apex/design.xml/StdCyclomaticComplexity"/>
   <rule ref="category/java/design.xml/SwitchDensity"/>
   <rule ref="category/apex/design.xml/TooManyFields"/>
   <rule ref="category/java/design.xml/TooManyFields">
      <properties>
         <property description="Max allowable fields"
                   max="1000"
                   min="1"
                   name="maxfields"
                   type="Integer">
            <value>15</value>
         </property>
      </properties>
   </rule>
   <rule ref="category/plsql/design.xml/TooManyFields"/>
   <rule ref="category/java/design.xml/TooManyMethods">
      <properties>
         <property description="The method count reporting threshold"
                   max="1000"
                   min="1"
                   name="maxmethods"
                   type="Integer">
            <value>10</value>
         </property>
      </properties>
   </rule>
   <rule ref="category/plsql/design.xml/TooManyMethods">
      <properties>
         <property description="The method count reporting threshold"
                   max="1000"
                   min="1"
                   name="maxmethods"
                   type="Integer">
            <value>1</value>
         </property>
      </properties>
   </rule>
   <rule ref="category/apex/design.xml/UnusedMethod"/>
   <rule ref="category/java/design.xml/UselessOverridingMethod"/>
   <rule ref="category/java/design.xml/UseObjectForClearerAPI"/>
   <rule ref="category/java/design.xml/UseUtilityClass"/>
   <rule ref="category/apex/documentation.xml/ApexDoc"/>
   <rule ref="category/java/documentation.xml/CommentContent"/>
   <rule ref="category/java/documentation.xml/CommentRequired"/>
   <rule ref="category/java/documentation.xml/CommentSize"/>
   <rule ref="category/java/documentation.xml/UncommentedEmptyConstructor">
      <properties>
         <property description="Ignore explicit constructor invocation when deciding whether constructor is empty or not"
                   name="ignoreExplicitConstructorInvocation"
                   type="Boolean">
            <value>false</value>
         </property>
      </properties>
   </rule>
   <rule ref="category/java/documentation.xml/UncommentedEmptyMethodBody"/>
   <rule ref="category/apex/errorprone.xml/ApexCSRF"/>
   <rule ref="category/java/errorprone.xml/AssignmentInOperand"/>
   <rule ref="category/java/errorprone.xml/AssignmentToNonFinalStatic"/>
   <rule ref="category/java/errorprone.xml/AvoidAccessibilityAlteration"/>
   <rule ref="category/java/errorprone.xml/AvoidAssertAsIdentifier"/>
   <rule ref="category/java/errorprone.xml/AvoidBranchingStatementAsLastInLoop"/>
   <rule ref="category/java/errorprone.xml/AvoidCallingFinalize"/>
   <rule ref="category/java/errorprone.xml/AvoidCatchingNPE"/>
   <rule ref="category/java/errorprone.xml/AvoidCatchingThrowable"/>
   <rule ref="category/java/errorprone.xml/AvoidDecimalLiteralsInBigDecimalConstructor"/>
   <rule ref="category/apex/errorprone.xml/AvoidDirectAccessTriggerMap"/>
   <rule ref="category/java/errorprone.xml/AvoidDuplicateLiterals"/>
   <rule ref="category/java/errorprone.xml/AvoidEnumAsIdentifier"/>
   <rule ref="category/java/errorprone.xml/AvoidFieldNameMatchingMethodName"/>
   <rule ref="category/java/errorprone.xml/AvoidFieldNameMatchingTypeName"/>
   <rule ref="category/apex/errorprone.xml/AvoidHardcodingId"/>
   <rule ref="category/java/errorprone.xml/AvoidInstanceofChecksInCatchClause"/>
   <rule ref="category/java/errorprone.xml/AvoidLiteralsInIfCondition">
      <properties>
         <property description="Comma-separated list of magic numbers, that should be ignored"
                   name="ignoreMagicNumbers"
                   type="String">
            <value>-1,0</value>
         </property>
         <property description="If true, only literals in simple if conditions are considered. Otherwise literals in expressions are checked, too."
                   name="ignoreExpressions"
                   type="Boolean">
            <value>true</value>
         </property>
      </properties>
   </rule>
   <rule ref="category/java/errorprone.xml/AvoidLosingExceptionInformation"/>
   <rule ref="category/java/errorprone.xml/AvoidMultipleUnaryOperators"/>
   <rule ref="category/apex/errorprone.xml/AvoidNonExistentAnnotations"/>
   <rule ref="category/ecmascript/errorprone.xml/AvoidTrailingComma">
      <properties>
         <property description="Allow a trailing comma within an object literal"
                   name="allowObjectLiteral"
                   type="Boolean">
            <value>false</value>
         </property>
         <property description="Allow a trailing comma within an array literal"
                   name="allowArrayLiteral"
                   type="Boolean">
            <value>false</value>
         </property>
      </properties>
   </rule>
   <rule ref="category/java/errorprone.xml/AvoidUsingOctalValues"/>
   <rule ref="category/java/errorprone.xml/BrokenNullCheck"/>
   <rule ref="category/java/errorprone.xml/CallSuperFirst"/>
   <rule ref="category/java/errorprone.xml/CallSuperLast"/>
   <rule ref="category/java/errorprone.xml/CheckSkipResult"/>
   <rule ref="category/java/errorprone.xml/ClassCastExceptionWithToArray"/>
   <rule ref="category/java/errorprone.xml/CloneMethodMustBePublic"/>
   <rule ref="category/java/errorprone.xml/CloneMethodMustImplementCloneable"/>
   <rule ref="category/java/errorprone.xml/CloneMethodReturnTypeMustMatchClassName"/>
   <rule ref="category/java/errorprone.xml/CloseResource"/>
   <rule ref="category/java/errorprone.xml/CompareObjectsWithEquals">
      <properties>
         <property description="List of canonical type names for which reference comparison is allowed."
                   name="typesThatCompareByReference"
                   type="List[String]">
            <value>java.lang.Enum,java.lang.Class</value>
         </property>
      </properties>
   </rule>
   <rule ref="category/java/errorprone.xml/ComparisonWithNaN"/>
   <rule ref="category/java/errorprone.xml/ConstructorCallsOverridableMethod"/>
   <rule ref="category/java/errorprone.xml/DetachedTestCase"/>
   <rule ref="category/java/errorprone.xml/DoNotCallGarbageCollectionExplicitly"/>
   <rule ref="category/java/errorprone.xml/DoNotExtendJavaLangThrowable"/>
   <rule ref="category/java/errorprone.xml/DoNotHardCodeSDCard"/>
   <rule ref="category/java/errorprone.xml/DoNotTerminateVM"/>
   <rule ref="category/java/errorprone.xml/DoNotThrowExceptionInFinally"/>
   <rule ref="category/java/errorprone.xml/DontImportSun"/>
   <rule ref="category/java/errorprone.xml/DontUseFloatTypeForLoopIndices"/>
   <rule ref="category/apex/errorprone.xml/EmptyCatchBlock">
      <properties>
         <property description="Empty blocks containing comments will be skipped"
                   name="allowCommentedBlocks"
                   type="Boolean">
            <value>false</value>
         </property>
         <property description="Empty blocks catching exceptions with names matching this regular expression will be skipped"
                   name="allowExceptionNameRegex"
                   type="Regex">
            <value>^(ignored|expected)$</value>
         </property>
      </properties>
   </rule>
   <rule ref="category/java/errorprone.xml/EmptyCatchBlock">
      <properties>
         <property description="Empty blocks containing comments will be skipped"
                   name="allowCommentedBlocks"
                   type="Boolean">
            <value>false</value>
         </property>
         <property description="Empty blocks catching exceptions with names matching this regular expression will be skipped"
                   name="allowExceptionNameRegex"
                   type="String">
            <value>^(ignored|expected)$</value>
         </property>
      </properties>
   </rule>
   <rule ref="category/java/errorprone.xml/EmptyFinalizer"/>
   <rule ref="category/java/errorprone.xml/EmptyFinallyBlock"/>
   <rule ref="category/vm/errorprone.xml/EmptyForeachStmt"/>
   <rule ref="category/apex/errorprone.xml/EmptyIfStmt"/>
   <rule ref="category/java/errorprone.xml/EmptyIfStmt"/>
   <rule ref="category/vm/errorprone.xml/EmptyIfStmt"/>
   <rule ref="category/java/errorprone.xml/EmptyInitializer"/>
   <rule ref="category/apex/errorprone.xml/EmptyStatementBlock">
      <properties>
         <property description="If false, empty private no-arg constructors are not flagged. This supports a common idiom used by singleton pattern implementations, utility classes, etc."
                   name="reportEmptyPrivateNoArgConstructor"
                   type="Boolean">
            <value>true</value>
         </property>
         <property description="If false, empty virtual methods are not flagged. This supports abstract base classes with default no-op implementations."
                   name="reportEmptyVirtualMethod"
                   type="Boolean">
            <value>true</value>
         </property>
      </properties>
   </rule>
   <rule ref="category/java/errorprone.xml/EmptyStatementBlock"/>
   <rule ref="category/java/errorprone.xml/EmptyStatementNotInLoop"/>
   <rule ref="category/java/errorprone.xml/EmptySwitchStatements"/>
   <rule ref="category/java/errorprone.xml/EmptySynchronizedBlock"/>
   <rule ref="category/java/errorprone.xml/EmptyTryBlock"/>
   <rule ref="category/apex/errorprone.xml/EmptyTryOrFinallyBlock"/>
   <rule ref="category/apex/errorprone.xml/EmptyWhileStmt"/>
   <rule ref="category/java/errorprone.xml/EmptyWhileStmt"/>
   <rule ref="category/ecmascript/errorprone.xml/EqualComparison"/>
   <rule ref="category/java/errorprone.xml/EqualsNull"/>
   <rule ref="category/java/errorprone.xml/FinalizeDoesNotCallSuperFinalize"/>
   <rule ref="category/java/errorprone.xml/FinalizeOnlyCallsSuperFinalize"/>
   <rule ref="category/java/errorprone.xml/FinalizeOverloaded"/>
   <rule ref="category/java/errorprone.xml/FinalizeShouldBeProtected"/>
   <rule ref="category/swift/errorprone.xml/ForceCast"/>
   <rule ref="category/swift/errorprone.xml/ForceTry"/>
   <rule ref="category/java/errorprone.xml/IdempotentOperations"/>
   <rule ref="category/java/errorprone.xml/ImplicitSwitchFallThrough"/>
   <rule ref="category/apex/errorprone.xml/InaccessibleAuraEnabledGetter"/>
   <rule ref="category/ecmascript/errorprone.xml/InnaccurateNumericLiteral"/>
   <rule ref="category/java/errorprone.xml/InstantiationToGetClass"/>
   <rule ref="category/pom/errorprone.xml/InvalidDependencyTypes">
      <properties>
         <property description="Set of valid types."
                   name="validTypes"
                   type="List[String]">
            <value>pom,jar,maven-plugin,ejb,war,ear,rar,par</value>
         </property>
      </properties>
   </rule>
   <rule ref="category/java/errorprone.xml/InvalidLogMessageFormat"/>
   <rule ref="category/jsp/errorprone.xml/JspEncoding"/>
   <rule ref="category/java/errorprone.xml/JumbledIncrementer"/>
   <rule ref="category/java/errorprone.xml/JUnitSpelling"/>
   <rule ref="category/java/errorprone.xml/JUnitStaticSuite"/>
   <rule ref="category/apex/errorprone.xml/MethodWithSameNameAsEnclosingClass"/>
   <rule ref="category/java/errorprone.xml/MethodWithSameNameAsEnclosingClass"/>
   <rule ref="category/java/errorprone.xml/MisplacedNullCheck"/>
   <rule ref="category/java/errorprone.xml/MissingSerialVersionUID"/>
   <rule ref="category/java/errorprone.xml/MissingStaticMethodInNonInstantiatableClass">
      <properties>
         <property description="If a constructor is annotated with one of these annotations, then the class is ignored."
                   name="annotations"
                   type="List[String]">
            <value>org.springframework.beans.factory.annotation.Autowired,javax.inject.Inject,com.google.inject.Inject</value>
         </property>
      </properties>
   </rule>
   <rule ref="category/xml/errorprone.xml/MistypedCDATASection"/>
   <rule ref="category/java/errorprone.xml/MoreThanOneLogger"/>
   <rule ref="category/java/errorprone.xml/NonCaseLabelInSwitchStatement"/>
   <rule ref="category/java/errorprone.xml/NonSerializableClass"/>
   <rule ref="category/java/errorprone.xml/NonStaticInitializer"/>
   <rule ref="category/java/errorprone.xml/NullAssignment"/>
   <rule ref="category/apex/errorprone.xml/OverrideBothEqualsAndHashcode"/>
   <rule ref="category/java/errorprone.xml/OverrideBothEqualsAndHashcode"/>
   <rule ref="category/kotlin/errorprone.xml/OverrideBothEqualsAndHashcode"/>
   <rule ref="category/pom/errorprone.xml/ProjectVersionAsDependencyVersion"/>
   <rule ref="category/java/errorprone.xml/ProperCloneImplementation"/>
   <rule ref="category/java/errorprone.xml/ProperLogger">
      <properties>
         <property description="Name of the static Logger variable"
                   name="staticLoggerName"
                   type="String">
            <value>LOG</value>
         </property>
         <property description="Name of the Logger instance variable"
                   name="loggerName"
                   type="String">
            <value>log</value>
         </property>
         <property description="Class name of the logger"
                   name="loggerClass"
                   type="String">
            <value>org.apache.commons.logging.Log</value>
         </property>
      </properties>
   </rule>
   <rule ref="category/java/errorprone.xml/ReturnEmptyCollectionRatherThanNull"/>
   <rule ref="category/java/errorprone.xml/ReturnFromFinallyBlock"/>
   <rule ref="category/java/errorprone.xml/SimpleDateFormatNeedsLocale"/>
   <rule ref="category/java/errorprone.xml/SingleMethodSingleton"/>
   <rule ref="category/java/errorprone.xml/SingletonClassReturningNewInstance"/>
   <rule ref="category/java/errorprone.xml/StaticEJBFieldShouldBeFinal"/>
   <rule ref="category/java/errorprone.xml/StringBufferInstantiationWithChar"/>
   <rule ref="category/java/errorprone.xml/SuspiciousEqualsMethodName"/>
   <rule ref="category/java/errorprone.xml/SuspiciousHashcodeMethodName"/>
   <rule ref="category/java/errorprone.xml/SuspiciousOctalEscape"/>
   <rule ref="category/java/errorprone.xml/TestClassWithoutTestCases"/>
   <rule ref="category/apex/errorprone.xml/TestMethodsMustBeInTestClasses"/>
   <rule ref="category/plsql/errorprone.xml/TO_DATEWithoutDateFormat"/>
   <rule ref="category/plsql/errorprone.xml/TO_DATE_TO_CHAR"/>
   <rule ref="category/plsql/errorprone.xml/TO_TIMESTAMPWithoutDateFormat"/>
   <rule ref="category/java/errorprone.xml/UnconditionalIfStatement"/>
   <rule ref="category/java/errorprone.xml/UnnecessaryBooleanAssertion"/>
   <rule ref="category/java/errorprone.xml/UnnecessaryCaseChange"/>
   <rule ref="category/java/errorprone.xml/UnnecessaryConversionTemporary"/>
   <rule ref="category/java/errorprone.xml/UnusedNullCheckInEquals"/>
   <rule ref="category/java/errorprone.xml/UseCorrectExceptionLogging"/>
   <rule ref="category/java/errorprone.xml/UseEqualsToCompareStrings"/>
   <rule ref="category/java/errorprone.xml/UselessOperationOnImmutable"/>
   <rule ref="category/java/errorprone.xml/UseLocaleWithCaseConversions"/>
   <rule ref="category/java/errorprone.xml/UseProperClassLoader"/>
   <rule ref="category/java/multithreading.xml/AvoidSynchronizedAtMethodLevel"/>
   <rule ref="category/java/multithreading.xml/AvoidThreadGroup"/>
   <rule ref="category/java/multithreading.xml/AvoidUsingVolatile"/>
   <rule ref="category/java/multithreading.xml/DoNotUseThreads"/>
   <rule ref="category/java/multithreading.xml/DontCallThreadRun"/>
   <rule ref="category/java/multithreading.xml/DoubleCheckedLocking"/>
   <rule ref="category/java/multithreading.xml/NonThreadSafeSingleton"/>
   <rule ref="category/java/multithreading.xml/UnsynchronizedStaticFormatter"/>
   <rule ref="category/java/multithreading.xml/UseConcurrentHashMap"/>
   <rule ref="category/java/multithreading.xml/UseNotifyAllInsteadOfNotify"/>
   <rule ref="category/java/performance.xml/AddEmptyString"/>
   <rule ref="category/java/performance.xml/AppendCharacterWithChar"/>
   <rule ref="category/java/performance.xml/AvoidArrayLoops"/>
   <rule ref="category/xsl/performance.xml/AvoidAxisNavigation">
      <properties>
         <property description="descendant::self abreviation, '//', will also trigger this rule."
                   name="checkSelfDescendantAbreviation"
                   type="Boolean">
            <value>false</value>
         </property>
      </properties>
   </rule>
   <rule ref="category/java/performance.xml/AvoidCalendarDateCreation"/>
   <rule ref="category/apex/performance.xml/AvoidDebugStatements"/>
   <rule ref="category/apex/performance.xml/AvoidDmlStatementsInLoops"/>
   <rule ref="category/java/performance.xml/AvoidFileStream"/>
   <rule ref="category/java/performance.xml/AvoidInstantiatingObjectsInLoops"/>
   <rule ref="category/apex/performance.xml/AvoidSoqlInLoops"/>
   <rule ref="category/apex/performance.xml/AvoidSoslInLoops"/>
   <rule ref="category/java/performance.xml/BigIntegerInstantiation"/>
   <rule ref="category/java/performance.xml/ConsecutiveAppendsShouldReuse"/>
   <rule ref="category/java/performance.xml/ConsecutiveLiteralAppends"/>
   <rule ref="category/apex/performance.xml/EagerlyLoadedDescribeSObjectResult">
      <properties>
         <property description="Do not allow SObjectDescribeOptions.DEFAULT option to ensure consistent results no matter where getDescribe is called"
                   name="noDefault"
                   type="Boolean">
            <value>false</value>
         </property>
      </properties>
   </rule>
   <rule ref="category/java/performance.xml/InefficientEmptyStringCheck"/>
   <rule ref="category/java/performance.xml/InefficientStringBuffering"/>
   <rule ref="category/java/performance.xml/InsufficientStringBufferDeclaration"/>
   <rule ref="category/apex/performance.xml/OperationWithLimitsInLoop"/>
   <rule ref="category/java/performance.xml/OptimizableToArrayCall"/>
   <rule ref="category/java/performance.xml/RedundantFieldInitializer"/>
   <rule ref="category/java/performance.xml/StringInstantiation"/>
   <rule ref="category/java/performance.xml/StringToString"/>
   <rule ref="category/java/performance.xml/TooFewBranchesForASwitchStatement">
      <properties>
         <property description="Minimum number of branches for a switch"
                   max="100"
                   min="1"
                   name="minimumNumberCaseForASwitch"
                   type="Integer">
            <value>3</value>
         </property>
      </properties>
   </rule>
   <rule ref="category/java/performance.xml/UseArrayListInsteadOfVector"/>
   <rule ref="category/java/performance.xml/UseArraysAsList"/>
   <rule ref="category/java/performance.xml/UseIndexOfChar"/>
   <rule ref="category/java/performance.xml/UseIOStreamsWithApacheCommonsFileItem"/>
   <rule ref="category/java/performance.xml/UselessStringValueOf"/>
   <rule ref="category/java/performance.xml/UseStringBufferForStringAppends"/>
   <rule ref="category/java/performance.xml/UseStringBufferLength"/>
   <rule ref="category/apex/security.xml/ApexBadCrypto"/>
   <rule ref="category/apex/security.xml/ApexCRUDViolation"/>
   <rule ref="category/apex/security.xml/ApexDangerousMethods"/>
   <rule ref="category/apex/security.xml/ApexInsecureEndpoint"/>
   <rule ref="category/apex/security.xml/ApexOpenRedirect"/>
   <rule ref="category/apex/security.xml/ApexSharingViolations"/>
   <rule ref="category/apex/security.xml/ApexSOQLInjection"/>
   <rule ref="category/apex/security.xml/ApexSuggestUsingNamedCred"/>
   <rule ref="category/apex/security.xml/ApexXSSFromEscapeFalse"/>
   <rule ref="category/apex/security.xml/ApexXSSFromURLParam"/>
   <rule ref="category/java/security.xml/HardCodedCryptoKey"/>
   <rule ref="category/jsp/security.xml/IframeMissingSrcAttribute"/>
   <rule ref="category/java/security.xml/InsecureCryptoIv"/>
   <rule ref="category/jsp/security.xml/NoUnsanitizedJSPExpression"/>
   <rule ref="category/vf/security.xml/VfCsrf"/>
   <rule ref="category/vf/security.xml/VfHtmlStyleTagXss"/>
   <rule ref="category/vf/security.xml/VfUnescapeEl"/>
</ruleset>
